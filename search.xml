<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《洞穴奇案》读后感</title>
      <link href="2021/05/16/du-hou-gan/dong-xue-qi-an-guan-hou-gan/"/>
      <url>2021/05/16/du-hou-gan/dong-xue-qi-an-guan-hou-gan/</url>
      
        <content type="html"><![CDATA[<p>从2021.4.29/16: 18到2021.5.16/21: 11，我将此书阅读完。</p><p>这本书，初读之时还好，但越往后，越觉得晦涩难懂，枯燥无味。但最后还是硬着头皮逼自己读完了。其实在最开始买书的时候就已经有心理准备了，买的一系列书籍都是偏向于哲理性，而不是故事趣味性。我认为，看一些这样的书能让自己的人生变得更有深度。</p><p>之所以选择这本书当作第一本读物，意在让这本书成为自身读书的一种导向，即多从不同的角度去看书中的问题、尽信书不如无书、事情没有绝对的对与错。</p><p>这本书围绕着一个洞穴中探险者的案例，14位法官各抒己见，从各个角度发表自己的看法，并着力寻找其他人看法中的漏洞。书中其实有很多的法理知识，比如紧急避难抗辩、正当性事由、免责事由，但我相信，对于我这种非法科出身的人，这些东西在十天半个月之后就会被我彻底遗忘，而留在我脑海的只有这本书给我的启示。</p><p>书中的案件很巧妙，它构造了一个所谓的“疑难”案件，这样的案件没有一目了然的判决方法，因此需要各个法官对其发表看法。可以说，当每个法官都发表自己的看法时，我都好像被说服了，但当最后合上书籍，我又觉得好像每个人说的都不对。其实这是正常的，因为当每个人看法官的讲话时，就会不由自主的将自己代入到法官预设的心理情景中，就自然而然的认同他的说法。但当经过14位法官的情景洗礼，这个时候你再去审视每个人的讲话，你就处于一种置身事外的感觉，从全局去把握它，因此能发现各个法官发言中的漏洞。</p><p>生活中的事肯定没有这件案件这么复杂，但也并不是非黑即白那样简单。所以，在面对问题时，不要简单的就下定结论，也不要一下子就被别人说服，因为这样你都会被带入到或自己、或别人一时想法所预设的情境中，越陷越深。面对问题时往往要跳出问题，用理性的角度去看待问题的方方面面，这与人生阅历有关，你经历的越多，你看待问题的角度也更加广泛，或许这就是大人所说的做事“成熟”与“幼稚”的区别吧。</p><p>当然，理性并不意味着正确。人生的道路很长，每个人有自己的走法，有的时候，冲动一些又何妨。在某个时候感性一些，全凭自己的冲动做事，虽然做错了，但给人留下的却是“不后悔”。“因为做了，所以知道不会成功”和“不曾做过，但觉得不会成功”这两者有着很大的区别。</p><p>人之所以伟大，在于他有思想。每个人的所思所想都不尽然相同。但每个人的每个想法都有其可取之处。我不求自己能够成为多么伟大的思想家，我只希望，在面对人生道路上的一些困难与选择之时，自己能够产生一些属于自己思想的光芒。看书其实就是汲取别人思想力量的过程，但书要审视着看，并不意味着书就一定有“绝对权威”，世界上没有绝对正确与绝对错误，书中的某一个理论和看法，都是基于某一社会情景和人物关系下在某一方面的看法。当然，大多数的看法都能较好的指导我们去做一些正确的事，但绝不可盲从。“书中自有颜如玉、书中自有黄金屋”，但当你身处荒漠，你需要的不是颜如玉和黄金屋，你需要的仅仅只是一杯清水！</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思辨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装tss过程中遇到的错误</title>
      <link href="2021/05/08/xue-xi/an-zhuang-tss-guo-cheng-zhong-yu-dao-de-cuo-wu/"/>
      <url>2021/05/08/xue-xi/an-zhuang-tss-guo-cheng-zhong-yu-dao-de-cuo-wu/</url>
      
        <content type="html"><![CDATA[<p>在安装TSS的过程中，出现了一个错误，如封面所示：</p><pre class=" language-bash"><code class="language-bash">collect2: error: ld returned 1 <span class="token keyword">exit</span> status</code></pre><p>经过观察可以看到，它所提示的未引用到的都是openssl新加入的算法，因此可以大胆猜测应该是它链接到了原来的openssl中，可以通过修改makefile来更改错误：（修改第83行）</p><p>原来：</p><pre class=" language-bash"><code class="language-bash">                           -L.</code></pre><p>修改后：</p><pre class=" language-bash"><code class="language-bash">                           -L.                       \                           -L/opt/openssl/lib</code></pre><p>其中，“/opt/openssl/lib”即新openssl的安装位置，问题解决！！！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下安装openssl的艰难旅程</title>
      <link href="2021/05/08/xue-xi/ji-lu-yi-xia-an-zhuang-openssl-de-jian-nan-lu-cheng/"/>
      <url>2021/05/08/xue-xi/ji-lu-yi-xia-an-zhuang-openssl-de-jian-nan-lu-cheng/</url>
      
        <content type="html"><![CDATA[<p>这个问题，起起伏伏纠缠了我将近大半年，终于解决了，在此记录一下！</p><p>在几个月前，当我踌躇满志的从学姐手里接过这个<a href="https://github.com/FutureTPM/sw-tpm">仿真</a>以后，怎么也没想到这个仿真的<a href="https://github.com/FutureTPM/openssl">第一步</a>就对我进行了劝退。但其实，只要讲究好方法，一切并没有想象中的那么难。</p><p>第一次开始时，我按照文件里面的INSTALL配置好了所需的环境，然后信心满满的按照它的操作来，先进行./config，再进行make，然后就悲催的报错了：</p><pre class=" language-bash"><code class="language-bash">error: inlining failed <span class="token keyword">in</span> call to always_inline <span class="token string">'_mm_aeskeygenassist_si128'</span><span class="token keyword">:</span> target specific option mismatch</code></pre><p>起初的我并不理解这个报错是什么意思，讲真的，那个时候的我连make编译的操作都不是很懂。我以为是偶然的一次错误，然后开始重复操作，显然，这样并没有什么用。</p><p>在经过搜索之后，网上说是要添加sse编译选项之类的，但我并不知道如何去添加，网上关于编译选项的东西也少之又少，最后这个东西就被暂时搁置了起来。</p><p>开学后，我又开始了重新尝试，在重新阅读INSTALL文件后并和学长交流后，发现里面要求是ansi C编译器，于是猜想是不是编译器不匹配的问题，在网上查找资料后，找到了如何设置编译器选项的程序：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> CFLAGS<span class="token operator">=</span>-ansi</code></pre><p>虽然错误变了，但事情还是没有解决，这件事情又暂时被搁置了。</p><p>有一次我又突然想到，我一直使用的是虚拟机，会不会因为这个导致出的问题，于是我在另一台电脑上直接重装了系统，后面因为有别的事情又被搁置了。</p><p>直到昨天，我再一次的尝试，而且再经过查询后，确信应该是sse的问题，但如何操作并不太明白，最后在学长的指导下，才真正明白了报错的原因。</p><p>因为openssl中使用了电脑自带的sse指令集，而我们并没有为编译过程指定，所以就会出现内联错误。</p><p>发现错误就要解决它，于是我尝试了在makefile中修改option,但并没有什么用，后面学长提醒说makefile是由config生成的，所以应该在config中修改，并给出了修改意见，在config的47、48行处添加：</p><pre class=" language-bash"><code class="language-bash">__CNF_CFLAGS<span class="token operator">=</span><span class="token string">"-msse2 -maes -mssse3"</span>__CNF_CXXFLAGS<span class="token operator">=</span><span class="token string">"-msse2 -maes -mssse3"</span></code></pre><p>make成功！</p><p>但执行后面的make test时，出现了错误，在学长的提醒下，知道这些错误其实不需要解决，因为它测试的很多是针对旧版本的，而在新版本下很多都不适配了。</p><p>最后，make install,然后试着输入openssl，果然，通往成功的道路从来都不是一帆风顺，又报错了：</p><pre class=" language-bash"><code class="language-bash">openssl: symbol lookup error: openssl: undefined symbol: dilithium_free, version OPENSSL_1_1_0</code></pre><p>这次报错应该是动态库链接的问题，我重新运行config：</p><pre class=" language-bash"><code class="language-bash"> ./config --prefix<span class="token operator">=</span>/opt/openssl --openssldir<span class="token operator">=</span>/usr/local/ssl</code></pre><p>将openssl的安装地址改成/opt/openssl中，然后把openssl安装目录的lib路径粘贴到/etc/ld.so.conf.d/libc.conf中：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token keyword">echo</span> <span class="token string">"/opt/openssl"</span> <span class="token operator">>></span> /etc/ld.so.conf.d/libc.conf <span class="token operator">&amp;&amp;</span> ldconfig</code></pre><p>然后再运行openssl，问题成功解决！！！！！</p><p>这件事情给了我很大的启发，不要有畏难情绪，其实从第一次在网上搜问题的时候就隐约找到了方向：SSE；但因为对这个不了解，所以就下意识的去忽略它。这样其实不太好，不了解可以学，问，但如果一直不主动出击，那么问题一直是问题，永远也解决不了。</p><p>加油！！！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请回答1988观后感</title>
      <link href="2021/05/06/guan-hou-gan/qing-hui-da-1988-guan-hou-gan/"/>
      <url>2021/05/06/guan-hou-gan/qing-hui-da-1988-guan-hou-gan/</url>
      
        <content type="html"><![CDATA[<p>其实，在刚开始看这部电视剧的时候，心里就一直有个想法，等看完之后一定要写一篇观后感记录一下，实在是因为这部电视剧有太多太多让我深受感触的地方了。这部电视剧并不是我第一次看，在去年的时候，我曾经看过十几分钟，但当时并没有很大耐心，刚开始没有让自己提起兴趣就再也没看了。直到这次，当耐下心来看的时候，才知道自己究竟错过了什么。</p><p>我想从三种情感来讲述我对于这部剧的看法：亲情、爱情、友情。</p><h2 id="亲情"><a href="#亲情" class="headerlink" title="亲情"></a>亲情</h2><p>首尔市道峰区双门洞住着五个家庭，这五个家庭都有一个生于1971年孩子。德善、善宇、东龙、崔泽、正焕，是从小一起长大的好朋友，故事的开始就是从这五个孩子的一次看电影”英雄本色“开始展开的。每个家庭有每个家庭的特点，但他们共同的相似之处都是，父母都很爱孩子。</p><h3 id="德善家"><a href="#德善家" class="headerlink" title="德善家"></a>德善家</h3><p>德善家有三个孩子，宝拉、德善和晚霞（晚霞这个名字我看了好几集才反应过来是他家儿子的名字）。在这个家庭中，由于父亲给别人作担保，所以家庭生活拮据，不得不住在半地下室中。尽管如此，三个孩子生活的很开心，宝拉体谅父母，德善天生乐天派，晚霞嘛，时不时毒舌一下，存在感很低。</p><p>在前面几集，就讲了德善与父母的冲突。德善是家里老二，但感觉一直没有得到父母的重视，比如，每次过生日都是借着姐姐的生日提前过，早上只有两个鸡蛋最后也是给了宝拉和晚霞，晚霞每次去接父亲都会偷偷买冰激凌吃吃等等。终于有一次，德善爆发了，她哭着质问父母为什么自己叫德善，为什么自己受到不公平对待（当时看到那一幕的时候真心心疼德善）。其实，她爸妈并没有不爱她，只是在生活中就不知不觉的忽视了她，而她也懂事，并没有向父母索要啥。父母将德善的懂事当成了习以为常，自然就少了几分关心，但其实他们心里还是爱着德善的。而德善就像一个开心果，她在母亲陷入中年抑郁的时候，用自己的开朗将母亲带了出来，她比姐姐更加的细腻，会注意到父亲的鞋子大了，并用纸帮忙塞进去。</p><p>宝拉的性格和父亲很像，他们都不擅长将自己的感情用言语表达出来，所以她俩相处的很不自在。在剧中，父亲与宝拉爆发出的最大的一场冲突就是宝拉参与游行示威，父亲大发雷霆，最后将宝拉锁在房门里面不让她出来。在那个情节中，我看到的是一个父亲竭力想要保护女儿的身影，他的歇斯底里，他的大发雷霆，都是因为害怕宝拉继续参加示威被当局抓进去。宝拉也是犟，她始终坚信自己是对的，直到她看见母亲为了找她将脚都磨破了的时候，她低头了。宝拉是一个很要强的人，在她仅有的几次流泪中，有一次是因为她看到自己给父亲买的衬衫小了，一次是看到婚礼上自己给父亲买的鞋子大了，一次是看到父亲给自己写的信。是啊，尽管都不善表达，但爱始终存在！</p><p>晚霞在整部剧中存在感都很低，但有一个细节让我记忆尤新，每次宝拉爸醉醺醺的回家后，总会抚摸着晚霞的脸庞，说：”瞧，晚霞都长这么大了“。后来因为怕吵醒晚霞，他也只是盯着晚霞，没有上手，这一幕真的又好笑又好哭。</p><p>这家还有一个令人记忆尤新的亲情关系是宝拉爸和宝拉奶奶。当宝拉奶奶去世后，德善看着和宾客言笑的父亲以及相互谈笑的姑姑很不解，为啥奶奶去世了他们一点悲伤得样子都没有。直到她大伯回来以后，几兄妹抱头痛哭，这个时候才终于懂得，哪有什么不悲伤，只是将悲伤藏在了内心得最深处，表面与宾客有说有笑，其实都是为了掩饰自己的难过。</p><h3 id="正焕家"><a href="#正焕家" class="headerlink" title="正焕家"></a>正焕家</h3><p>正焕的家里有个逗逼老爸和一个”豹子“女士。正焕还有一个哥哥，名为正峰，自带幸运buff。</p><p>说起正焕家，本来他家比宝拉家还穷，然后，每个人都梦寐以求的事在他家发生了——中彩票。正峰买彩票中了，从此他家实现了财富自由，住上了大房子，正好就在德善家上面。</p><p>正焕其实有点沉默寡言，和朋友在一起是放的很开，但面对爸妈时总是很闷，有啥事也不说。”豹子“女士后面也察觉到了自己对他关心不够，找他谈心，但最后还是大眼瞪小眼。最然话少，但爱是真的。他会在父亲情绪低落的时候主动去做那些往常看着就让他尴尬的动作，也会因为母亲更年期而为她计划一场特别的婚礼。有一幕其实让人印象挺深刻的，就是他长大后因为当兵常年回不了家，每次回去都会让父母激动不已。其实，反映到我们的身上其实也一样，每次寒暑假回去父母不都是翘首以盼。所以，多陪陪父母，千万不要等到”树欲静而风不止，子欲养而亲不待。“</p><p>正峰，一个参加了七八次高考的生活全能boy。他和父母的亲情主要反映在他生病住院的那段时间，他要做一个心脏手术，自己心里紧张的不行，正焕，他爸，他妈都过来陪他。他妈一次又一次的跟他说就是小手术，根本不用紧张，其实最紧张的反而是她自己。她像医护人员一次次的询问是不是手术几乎没危险，都是为了掩盖自己内心的不安，每次假装出去看电视，其实是心中忍受不了出去痛哭了。</p><p>兄弟之情依旧让人感动，正焕小时候想踢足球，长大了又想开飞机。同伴都以为他是因为看了电影受到里面对的影响，只有他哥知道，他是为了完成自己的梦想。他看着他哥面对电视上的飞机、操场上的足球感慨，虽然他心里没有说什么，但内心深处却打定主意要完成哥哥的梦想。当然，哥哥也不想因为自己耽误弟弟，所以在面向流星许愿时，他希望自己的弟弟能够做自己喜欢做的事情。</p><h3 id="善宇家"><a href="#善宇家" class="headerlink" title="善宇家"></a>善宇家</h3><p>善宇应该是我在这部剧里看到的最正的男生了，对待家人谦逊有礼，成绩名列前茅，也能和同学玩的很开。</p><p>善宇爸在几年前因为一场意外去世了，留下了他和他妈还有他妹珍珠相依为命。他深知母亲的不容易，所以他从来没有向母亲索要什么昂贵的东西，为了实现对母亲的承诺，他考取了医科大学。他不想让母亲出去打工，因为他不想让母亲受累，而母亲却瞒着他去打工，只是希望她的儿子也能穿上和别人一样的鞋子，最后，他知道了真相，他懊恼的坐在椅子上，我想，那个时候他懊恼的不是母亲欺骗了他，而是痛恨自己不能为母亲分担吧。知道真相的他最后并没有去质问母亲，他也选择了隐瞒，或许他知道，只有这样母亲才会快乐吧。在双向隐瞒中，折射出来的是最朴素的亲情。当他知道母亲可能会和别人在一起时，他从不解，难过到最后的释然，母亲一开始也因为善宇拒绝了别人的好意。不得不说，这些情节真的看的让人泪目。</p><p>有一说一，小时候的珍珠真心可爱，和善宇的互动也很有爱。</p><h3 id="崔泽家"><a href="#崔泽家" class="headerlink" title="崔泽家"></a>崔泽家</h3><p>崔泽，天才围棋手，幼时丧母，和父亲相依为命。</p><p>崔泽是一个沉默寡言的人，他父亲也是，两个人在家里几乎不会说几句话。崔泽家也成了这几个小伙伴们经常聚会的地方。但是，崔泽爸对他的爱是显而易见的，他照顾好了儿子的一日三餐，他不在乎崔泽会不会赢比赛，甚至在别人都说他儿子会赢的时候他也会反复说比赛说不准的。其实，他就是不想给崔泽太大压力，别人在乎崔泽成绩，他在乎的是崔泽是否开心快乐。他也曾说过，他甚至希望自己的儿子不是天才棋手，而是可以和别的孩子一样有一个开心快乐的童年。</p><p>崔泽爸是一个很淡定的人，有小偷，着火了，这些他都好像反应迟钝一样好不在意。直到有一次，崔泽的航班可能出意外了，他真正的急了，他不顾自己的手，硬生生的将锁从柜子上扯下来，在打通电话后，他大吼着询问崔泽的情况，但当儿子接电话后，他的语气又变得平静起来，平静的问候了几句。只能说，在最紧急的情况下，他才迸发出了最真实的情感，虽不善言辞，但爱永在。</p><h3 id="东龙家"><a href="#东龙家" class="headerlink" title="东龙家"></a>东龙家</h3><p>东龙，气氛活跃担当，父亲教导主任，母亲王牌销售，但正因如此，他并没有得到多少陪伴。</p><p>东龙是一个天生的乐天派，喜欢放屁，听力灵敏。但他内心并没有真正的满足，因为他始终觉得自己家里没人关心他，甚至他离家出走了两天也没人发现。他最渴望的是生日时喝母亲的海带汤，可生日时因为母亲忙最后也没喝到，他失落极了。父母也忽视了他的感受，其实也并不是不爱他。当他们认识到自己的错误时也会耐心的陪伴孩子去喝一碗海带汤，也会因为孩子受伤而心疼不已。工作的忙碌让他们忽视了生活中的很多事、很多人。但爱始终在心中，不曾改变。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>整部剧看下来，让我感触最深的不是爱情、不是友情，恰恰就是亲情。好几次也因为里面的一些画面而鼻头发酸，因为往往亲情最内敛、最深刻、最无私。它不会很激烈，但它却充满了我们的生活，爱与被爱都是一种幸福。</p><h2 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h2><p>爱情也是这部剧的主旋律之一。它有少年时懵懵懂懂、情窦初开的初恋；也有人至中年，携手共进的陪伴。</p><h3 id="德善、崔泽、狗焕的纠缠恩怨"><a href="#德善、崔泽、狗焕的纠缠恩怨" class="headerlink" title="德善、崔泽、狗焕的纠缠恩怨"></a>德善、崔泽、狗焕的纠缠恩怨</h3><p>德善，一个缺爱的可爱女孩。在最开始的时候，她并没有确定自己到底喜欢谁，反而是谁喜欢她她就喜欢谁，一种“被动式”的喜欢。就如最开始的善宇，当她得知善宇喜欢自己的时候，她就不自觉的在善宇面前有意的表现自己，并且期待善宇的表白。当她得知狗焕可能喜欢她的时候，她也开始表现得扭扭捏捏。我们不可能去谴责她对待感情不认真，其实从她得成长轨迹可以知道，她在家中并不受受重视，所以她面对别人的喜欢时的第一反应就是开心，并且也期待着通过获得这份感情去证明自己。其实很多人都是这样，因为缺爱，就往往容易被别人的喜欢所打动，进而陷进去。</p><p>在最开始的时候，我是希望狗焕和德善在一起的，中间一度还因为知道结局她俩没在一起而想弃剧。我觉得狗焕最大的悲剧在于他不能正确的把自己的感情表达出来，一直在隐藏，在逃避、在否认。德善一度在“他喜欢我”和“他不喜欢我”之间反复纠结，但他并没有去表达过什么，自然而然，两人就越走越远。不可否认，狗焕是很喜欢德善的，去学校之前等德善、公交车上护着德善、下雨天给德善送伞等等，这些点点滴滴都表现了他对于德善默默的呵护，但也正是“默默”，再加上他不停的去怼德善，德善并不能感觉到他的喜欢。就像亲情里说的一样，太过内向，不会去表达自己的情感，或许是因为小时候家庭条件带来的自卑感，最后只能看着德善走向别人。不过好在现实里的两个人好像走到了一起，总算让观众没那么遗憾了。</p><p>崔泽，一个脸上挂着纯真的笑容的人，最后我也接受他和德善在一起的原因可能也就是因为“颜值即正义”吧。他和德善最后走到了一起，这在开头是谁都没想到的。因为他一开始在所有人眼中都是要被呵护的弟弟。他的生活中除了围棋，好像就没有了其他东西。他也内向，但他可以勇敢的和朋友说他喜欢德善，是男人女人的那种喜欢，他会明明白白的让德善感受他的关心，他的爱。虽然最后中年的他俩有点搞笑，但不可否认她俩最后还是过的很开心。</p><p>这是全剧中唯一一个“三角恋”，虽然很可能大部分是暗恋。但是我觉得，努力去认清自己的感情到底是不是爱，如果是，请在正确的时间大声说出来。（有一说一，他们在高中谈的感情好像都在高考前结束了，不知道这是不是呼吁我们不要早恋的意思，哈哈。）</p><h3 id="善宇和宝拉"><a href="#善宇和宝拉" class="headerlink" title="善宇和宝拉"></a>善宇和宝拉</h3><p>如果不是事先了解到善宇和宝拉最后在一起了，我怎么也猜不到这两个一开始毫无交集的人会走到最后。</p><p>善宇，一个乖小孩。宝拉，一个出场就自带怒气buff的女孩。当善宇第一次向宝拉表白时，宝拉只是把他当作一个小孩一般转头就忘。但当她遇到困难时，又是这个乖小孩主动站出来帮助她，最后感动了她。其实，宝拉内心也有脆弱的时候，而善宇虽然表现得很乖，但在关键时刻能为她撑起一片天，或许这就是所谓”性格互补”。</p><p>好像不经历一些挫折考验的爱情算不得真正的爱情，她俩的爱情也因为宝拉需要参加考试无疾而终。确实很可惜，在事业和爱人之间，宝拉选择了事业未来。但当她完成了目标，她才发现，或许曾经那个少年才是最难能可贵的。所以，在命运的安排下，他俩重新走到了一起，走向了婚姻的殿堂。</p><p>或许她俩爱情的第一次结束就是因为“在错误的时间遇见了对的人”，因为在那个时候，善宇面临着高考，宝拉也面临着考试。但是，他俩的故事也让我们知道，即使对的人在错误的时间遇到了，我们也可以等到正确的时间再去遇见一次，只要心中感情不变，时间的流逝都只是爱情的加深。</p><h3 id="正峰和美玉"><a href="#正峰和美玉" class="headerlink" title="正峰和美玉"></a>正峰和美玉</h3><p>他俩的爱情我也只能说是对缘分的最好诠释了吧，一场雨，一把伞，把两个毫不相干的人联系到了一起。</p><p>正峰，一个心思单纯的大男孩；美玉，一个向往着爱情的小女孩。他们因为一场大雨在茫茫人海中碰到了一起，最终正峰的单纯打动了美玉，美玉的爱也让正峰深陷其中。正如前文所说，没有经历磨难的爱情算不得真正的爱情，她俩的爱情也因为美玉出国而暂时画上了句号。但让人没有想到的是，在多年之后他们依旧能在网上相遇，最后重续前缘。</p><p>或许是为了喜剧效果，他俩一开始的形象都有点“扮丑”的意味。但这样的缘分恐怕在很多人的心目中都曾经幻想过吧：在茫茫人海中，因为一次偶然，遇见了自己生命中的另一半，最后和他/她携手走完余生。但是，真的只有缘分吗，如果正峰第一次约会没有一直坚持等下去，如果美玉没有给正峰写信，我相信他俩也不会仅仅因为一次相遇就走到一起。所以，缘分到了很重要，但更重要的是把握住，不然最后只能是“有缘无份”了。</p><h3 id="崔泽爸和善宇妈—“中年人的爱情”"><a href="#崔泽爸和善宇妈—“中年人的爱情”" class="headerlink" title="崔泽爸和善宇妈—“中年人的爱情”"></a>崔泽爸和善宇妈—“中年人的爱情”</h3><p>崔泽，幼年丧母；善宇，前几年父亲因为发生意外去世了。崔泽和父亲一起生活，而善宇和母亲、妹妹相依为命，崔泽爸和善宇妈最后走到了一起。</p><p>他们的爱情没有轰轰烈烈，更多的是一些生活琐事反映出来。他俩的故事不好说从何时开始，但中间的一个转折点应该就是崔泽爸中风住院和善宇妈遇到经济危机，可能危难之际更能体会到自己的和对方的感情吧。崔泽爸中风住院后，善宇妈细致入微的照顾；而崔泽爸也在善宇妈遇到困难时质问她为什么不找他帮忙。在这个时候也揭示了崔泽爸搬到双门洞的真正原因：正是由于善宇妈的鼓励，他才走出了亡妻的阴影，在新的地方，开启了他和崔泽新的生活。</p><p>中年人的爱情有着更多的顾虑，他们把自己的感情深深的埋在心里，但又会通过生活中的一些事情表达出来。虽然电视最后也没有详细说明他们最后怎么在一起了，他们的故事让我们看到了：爱情也不一定非要轰轰烈烈，它可以像春雨一般润物于无声，在生活的每个方面彰显出来。</p><h3 id="父母们的爱情"><a href="#父母们的爱情" class="headerlink" title="父母们的爱情"></a>父母们的爱情</h3><p>在这里我想讲三对父母，宝拉爸妈、正焕爸妈、东龙爸妈的爱情。之所以将父母们的爱情归于一处，因为我觉得他们的爱情不单单只是爱情了，它更多的是爱情与亲情的混合物。</p><p>宝拉爸妈，其实在最开始的时候，我也感受不到她俩的爱情。因为在我眼里宝拉爸就只会大吼大叫，然后不顾家庭经济情况去帮助别人。或许宝拉妈也是这么觉得的，在一次与丈夫吃面的时候她用羡慕的眼光看向旁边的夫妇。但是，正如她那个时候挑的伞一样，漂亮的不一定是最好的，只有适合自己的才是最好的。在宝拉妈可能患癌症的时候，这位中年男人终于表露出了自己最深刻的感情，他在朋友面前痛苦流涕。但是，第二天的他又变成原样，或许，埋藏进内心的才是最深刻的感情吧。</p><p>不同于宝拉爸，正焕爸恨不得每天向自己的老婆表现爱意，他用自己的风趣幽默来刻意让生活有趣起来。但正焕妈好像很反感这一点，对于正焕爸的不正经、扣扣嗖嗖愤恨到了极点。但是当正焕爸心情不好时，她会化身小女人去安慰他，在正焕爸因为锻炼而摔伤时，也会深入生活的方方面面去照顾他。这两个人，一个就是“嘴甜乐天派”，还有一个是“嘴硬心软”。</p><p>东龙爸妈的故事在剧中说的并不多，但让我印象深刻的是发生的一件事。当东龙妈也遭遇中年抑郁危机后，她选择了离家出走，去了自己妹妹家里。而东龙爸在得知这个消息后，并没有立马去接回来，而是跟她妹妹说让她好好休息一段时间，然后自己承担起了家中的大大小小的事物，为此不惜向单位请了长假。</p><p>父母们的爱情各不相同，但有一个共同的特点，都藏在了生活的方方面面，它不像年轻人一样大声示爱。它的存在，更多的体现在伴侣的“安全感”上，因为有彼此，所以可以携手共进，就算有自己过不去的坎，也一直会有一个人在背后默默支持着你。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>剧中还有一些爱情故事，比如晚霞和他的小女朋友、东龙和王子贤等等，在此不再加以赘述。</p><p>爱情，多么美好的一件事物，这种感情仿佛深深的根植于每个人的本性之中，正如异性之间相互吸引一般，我相信那不仅仅是生殖繁衍的冲动，也有对于美好爱情的向往。爱情将两个毫不相干的人联系在一起，有的时候甚至能迸发出无比强大的力量。</p><h2 id="友情"><a href="#友情" class="headerlink" title="友情"></a>友情</h2><h3 id="弄堂里的五个人"><a href="#弄堂里的五个人" class="headerlink" title="弄堂里的五个人"></a>弄堂里的五个人</h3><p>德善、正焕、东龙、崔泽、善宇，故事的开头就是这五个人，主线也是围绕这五个人展开的。在这五个人身上，我们能看到的就是无比深厚的友情吧。</p><p>德善虽然是个女孩，但却是个“女汉子”，在五人中间，她就是经常被怼的那个。但其他人也很讲义气，在她参加跳舞比赛遇到困难时，正焕、东龙、善宇顶替了上去。正焕沉默寡言，但在朋友身边却也往往能放的很开，或许在他的内心朋友之间不需要掩饰什么吧。东龙就是一个开心果，在他离家出走的时候，是其他几个人把他带了回来。崔泽在我眼中算是一个“高分低能”的象征，虽然是个天才围棋少年，却总总因为一些生活琐事把自己弄得手忙脚乱，其他四个人就像照顾弟弟一样，为他细细打理着一切。善宇算是一个大哥哥，他虽然很乖，但也会和朋友们一起看电影、踢足球，做那些叛逆的事。</p><p>在这五人中间，有几件事让人印象很深刻。</p><p>德善、正焕、崔泽，这三人的友情中又掺杂着爱情，这就让事情变得不简单了。但是当正焕知道崔泽喜欢德善时，他选择了退出；仿佛命运的安排，崔泽也知道了正焕喜欢德善，他的选择也是退出。没有像其他电视剧里那样狗血的大打出手，他们用自己的方式去维护着彼此的友情。他们的内心其实都很煎熬，正焕甚至向流星许愿希望崔泽不要那么好，这样他才有去抛下友情追求爱情的勇气吧。最后崔泽和德善在一起，正焕也献上了真诚的祝福。</p><p>崔泽总是一副很累的样子，因为他不得不奔波于各地去参加比赛。在外人面前，他是一副冷酷、有礼貌的形象。而只有在朋友面前，他才会露出那个人畜无害的笑容。电影里最常出现的画面就是五个人坐在崔泽的房间里，谈天说地、看电影，这个时候的崔泽才是最放松的时刻。虽然崔泽生活技能不行，但他的朋友往往都会一边吐槽，一边把帮他把所有的事情都做好。</p><p>真正的友情是不掺杂任何利益的，它与出身、能力无关。它是那种你可以长时间不联系，但是当见面的时候又向从来没分开过一样的感情。</p><h3 id="三个人的相互扶持"><a href="#三个人的相互扶持" class="headerlink" title="三个人的相互扶持"></a>三个人的相互扶持</h3><p>在剧中还有一段感情让人印象深刻，即善宇妈、宝拉妈和正焕妈的友情。</p><p>她们三个呆在一起的时间应该是最长的，平日里，丈夫出去上班，儿女出去上学，这三个人就聚在一起唠嗑做事。当一个人遇见困难时，其他两个人也会毫不犹豫的出手相助。她们会开彼此的玩笑，在真的有人遇到困难时，也会忧愁的睡不着觉。她们的友情或许没有前面年轻人那么让人感触深刻，但我觉得她们让彼此的生活没有那么枯燥，生活里多了几分乐趣。</p><p>她们真正诠释了“远亲不如近邻”，因为是友情，她们不会太过干涉彼此的生活，但她们却组成了彼此生活中的一道亮丽的风景线。</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>友情虽然写的不多，但并不代表这它在剧中表现得少。相反，在我看来，剧中处处都是友情，但也正是因为剧中友情平铺在每一处，所以它没有前两处那么表现得深刻。人的一生中，与你有亲情关系得只有那么寥寥几人，有爱情关系的只一人而已，唯有友情，它可以结识许多。但多并不意味着好，交朋友多倒不如精，有那几个知己好友，足矣。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在电视剧的最后，德善感慨道：“再也回不去1988的双门洞了。”是啊，我们也回不去过去了。小的时候总想长大，但真正长大了，才发现最幸福的时光就是小时候。</p><p>在电影的很多地方，我们仿佛能看到我们生活的影子。这并不是说我们的生活与韩国生活的相似，而是因为其中的感情是相通的。透过亲情，我想到了我的父母；透过爱情，我能想到某个人；透过友情，我能想到我那几个朋友。他们的存在让我的生活多姿多彩，很庆幸能遇到他们！</p>]]></content>
      
      
      <categories>
          
          <category> 观后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 请回答1988 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定个小目标</title>
      <link href="2021/05/06/sheng-huo-gan-wu/ding-ge-xiao-mu-biao/"/>
      <url>2021/05/06/sheng-huo-gan-wu/ding-ge-xiao-mu-biao/</url>
      
        <content type="html"><![CDATA[<p>读书使人明智，看电影体会百味人生。</p><p>要想让自己变得不那么浅薄，就得多读书，多观影。</p><p>因此，给自己立一个flag，把买的书都仔仔细细的进行阅读，并且看完豆瓣上电影排行前250。</p><p>每读完一本书，写一篇读后感；每看完一部电影，写一篇观后感。</p><p>通过这样的方式，增长自己的思想深度和广度。</p><p>加油！！！</p>]]></content>
      
      
      <categories>
          
          <category> 生活感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心烦意乱</title>
      <link href="2021/04/14/sheng-huo-gan-wu/xin-fan-yi-luan/"/>
      <url>2021/04/14/sheng-huo-gan-wu/xin-fan-yi-luan/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;有的时候，总是感觉自己被一种巨大的负面情绪包裹着，整个人都陷入了一种低迷的状态。在这种状态下，做啥都无法集中注意力，今天下午的我正是处于这种状态。</p><p>&emsp;&emsp;其实我心里很清楚，我为什么会陷入这种情绪，而且我也已经将引起这种情绪的问题给解决了。但一下子还是没有从这种情绪中走出来，或许这就是所谓的心有余悸吧。</p><p>&emsp;&emsp;人生永远不可能一帆风顺，或多或少你都会遭受一些挫折，或是一些糟糕的事，或是一些糟糕的人。但我们能做的就是不要沉浸在这些挫折中，我们能做的是把握现在和未来。你要从现在开始行动，要相信自己的未来。爱笑，积极乐观的人生活才会过的越来越好！</p><p>&emsp;&emsp;我很清楚自己未来想要的是什么，我也很明白自己现在正在经历着什么，唯一让我耿耿于怀的，就是那不愿回想的过去。但是，又何必去回想呢，那些都已经过去了，已经吃进肚子里的事物需要再吐出来反复咀嚼吗？不需要。它可以成为你在未来的某一天回忆的东西，但它绝不能成为你在大好年华，该去做事的时候的阻碍。</p><p>&emsp;&emsp;有的时候，我们真的需要从一个上帝的角度去俯视我们的生活，这样，很多烦心事都将显得微不足道。家人健康，未来可期，有朋友相伴，所谓的烦只是庸人自扰。你要明白，一个人的生命在历史的齿轮下其实很短暂。而在这样短暂的生命中，你要做的就是过好每一天！</p><p>&emsp;&emsp;在乎你的人，你要学会去珍惜他们；不在乎你的人，你要学会远离他们。因为只有这样，你的生活才会变得开心、有意义。</p><p>&emsp;&emsp;Happy every day!!!</p><p>&emsp;&emsp;邦之伟才 <strong>:laughing::laughing::laughing::laughing:</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LWE难题</title>
      <link href="2021/04/07/xue-xi/lwe-nan-ti/"/>
      <url>2021/04/07/xue-xi/lwe-nan-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="LWE问题（Learning-With-Error）"><a href="#LWE问题（Learning-With-Error）" class="headerlink" title="LWE问题（Learning With Error）"></a>LWE问题（Learning With Error）</h2><h3 id="有噪音的高斯消除法"><a href="#有噪音的高斯消除法" class="headerlink" title="有噪音的高斯消除法"></a>有噪音的高斯消除法</h3><p>高斯消除问题系统性的定义就是，给定一个矩阵A和一个向量b，能否找到一个向量x，使得Ax=b的关系满足。</p><p>在我们学会如何求解线性方程组之后，我们发现这其实并不是什么难的问题，只需要不停地在行与行之间相互使用高斯消除，就可以得到未知数的解。现在，我们把这个高斯消除问题变化一下，给它增加一些难度：增加噪音。</p><p>假如这个问题变成，如果已知一个矩阵A，，并且我们还知道一个向量:  b=Ax+e;</p><p>其中e是我们在一个固定数值范围内随机采集的一个随机噪音向量，能否有效的通过A和b的值来还原最初的未知数向量x？</p><p>加上这么一个随机噪音之后，我们线性代数的方法就已经不管用了，因为如果我们使用高斯消除法对每一行进行消除的时候，同时还会带着噪音进去，所以导致无法算出任何一个未知数的值。似乎唯一能够找到x的方法就是暴力破解，一个一个猜x的可能值，然后逐渐逼近b。</p><p>总结一下，带上了噪音之后，这个问题就变成了已知一个矩阵A，和它与一个向量x相乘得到的乘积再加上一定的误差（error）e，即Ax+e，如何有效的还原（learn）未知的向量。我们把这一类的问题统称为误差还原（Learning With Error， LWE）问题。为了方便表述，我们后面都称之为LWE。</p><h3 id="搜索LWE问题（Search-LWE-Problem）的正式定义"><a href="#搜索LWE问题（Search-LWE-Problem）的正式定义" class="headerlink" title="搜索LWE问题（Search LWE Problem）的正式定义"></a><strong>搜索LWE问题（Search LWE Problem）的正式定义</strong></h3><p>首先，我们需要熟悉一下，LWE问题里面需要用到的一些关键概念：</p><ul><li><p>首先，为了密码学的应用以及方便计算，我们使用$Z_q$这么一个素数有限域。具体来说，也就是我们的世界里只存在<img src="https://www.zhihu.com/equation?tex=(-q/2,+q/2)" alt="[公式]">这个范围内的所有整数。</p></li><li><p>为了更好的<strong>衡量噪音</strong>，我们定义<img src="https://www.zhihu.com/equation?tex=%5Cmid%5Cmid+e+%5Cin+%5Cmathbb%7BZ%7D_q%5Em+%5Cmid%5Cmid_%5Cinfty" alt="[公式]">为向量<img src="https://www.zhihu.com/equation?tex=e" alt="[公式]">（维度为<img src="https://www.zhihu.com/equation?tex=m" alt="[公式]">）的<strong>无限范数（Infinity Norm）</strong>，具体操作就是看<img src="https://www.zhihu.com/equation?tex=e" alt="[公式]">这个向量中的每一个值，然后返回最大的那个。<img src="https://www.zhihu.com/equation?tex=%5Cmid%5Cmid+e+%5Cmid%5Cmid_%5Cinfty+=+max_i%5Em+%5Cmid+e_i+%5Cmid" alt="[公式]"></p></li><li><p>最后，我们定义<img src="https://www.zhihu.com/equation?tex=x_B" alt="[公式]">就是为一个最大值封顶为<img src="https://www.zhihu.com/equation?tex=B" alt="[公式]">的<strong>随机分布</strong>。也就是说，从这个随机分布中取出的每一个随机值都会小于<img src="https://www.zhihu.com/equation?tex=B" alt="[公式]">。<img src="https://www.zhihu.com/equation?tex=%5Cforall+x+%5Cleftarrow+x_B%5Em:+%5Cmid%5Cmid+x+%5Cmid%5Cmid_%5Cinfty+%5Cle+B" alt="[公式]"></p></li></ul><p>结合上述的概念，<strong>搜索LWE问题的正式定义</strong>如下：</p><p><img src="https://www.zhihu.com/equation?tex=LWE(n,+m,+q,+x_B):+%5Ctext%7B+Search+Version%7D%5C%5C+%5Ctext%7BLet+%7D+A+%5Cstackrel%7BR%7D%7B%5Cleftarrow%7D+%5Cmathbb%7BZ%7D_q%5E%7Bm+%5Ctimes+n%7D,+s+%5Cstackrel%7BR%7D%7B%5Cleftarrow%7D+%5Cmathbb%7BZ%7D_q,+e+%5Cstackrel%7BR%7D%7B%5Cleftarrow%7D+x_B.%5C%5C+%5Ctext%7BGiven+%7D+(A,+As+++e)+%5Ctext%7B,+find+%7D+s%27+%5Cin+%5Cmathbb%7BZ%7D_q%5En+%5Ctext%7B+s.t.+%7D+%5Cmid%5Cmid+As%27+-+(As+++e)+%5Cmid%5Cmid_%5Cinfty+%5Cle+B+%5C%5C"></p><p>简单的来说，在一个LWE问题当中，我们首先需要定义矩阵<img src="https://www.zhihu.com/equation?tex=A" alt="[公式]">的<strong>维度</strong>为<img src="https://www.zhihu.com/equation?tex=m+%5Ctimes+n" alt="[公式]">。<img src="https://www.zhihu.com/equation?tex=m" alt="[公式]">代表了这个线性方程组<strong>一共有多少组方程</strong>，而<img src="https://www.zhihu.com/equation?tex=n" alt="[公式]">代表了每个方程中有<strong>多少个未知数</strong>。我们还需要定义整个有限域<img src="https://www.zhihu.com/equation?tex=%5Cmathbb%7BZ%7D_q" alt="[公式]">的大小<img src="https://www.zhihu.com/equation?tex=q" alt="[公式]">，一般来说我们都会选择一个<strong>足够大的素数</strong>作为<img src="https://www.zhihu.com/equation?tex=q" alt="[公式]">的值。最后，我们需要决定我们叠加的误差噪音的<strong>取值上限</strong><img src="https://www.zhihu.com/equation?tex=B" alt="[公式]">。<img src="https://www.zhihu.com/equation?tex=B" alt="[公式]">的大小决定了我们LWE问题中需要找到的解距离实际的取值<img src="https://www.zhihu.com/equation?tex=%5Chat%7Bb%7D" alt="[公式]">究竟可以相差多少。</p><p>定义了上面的这些参数之后，LWE问题就很好理解了：<strong>给定矩阵<img src="https://www.zhihu.com/equation?tex=A" alt="[公式]">以及带有误差的乘积<img src="https://www.zhihu.com/equation?tex=As+++e" alt="[公式]">，还原出未知的向量<img src="https://www.zhihu.com/equation?tex=s" alt="[公式]">。</strong></p><h3 id="从搜索LWE（Search-LWE）到决策LWE（Decisional-LWE）"><a href="#从搜索LWE（Search-LWE）到决策LWE（Decisional-LWE）" class="headerlink" title="从搜索LWE（Search LWE）到决策LWE（Decisional LWE）"></a><strong>从搜索LWE（Search LWE）到决策LWE（Decisional LWE）</strong></h3><p>决策LWE（简称为DLWE）:</p><p><img src="https://www.zhihu.com/equation?tex=LWE(n,+m,+q,+x_B):+%5Ctext%7B+Decisional+Version%7D%5C%5C+%5Ctext%7BLet+%7D+A+%5Cstackrel%7BR%7D%7B%5Cleftarrow%7D+%5Cmathbb%7BZ%7D_q%5E%7Bm+%5Ctimes+n%7D,+s+%5Cstackrel%7BR%7D%7B%5Cleftarrow%7D+%5Cmathbb%7BZ%7D_q,+e+%5Cstackrel%7BR%7D%7B%5Cleftarrow%7D+x_B,+v+%5Cstackrel%7BR%7D%7B%5Cleftarrow%7D+%5Cmathbb%7BZ%7D_q%5Em.%5C%5C+%5Ctext%7BDistinguish+%7D+(A,+As+e)+%5Ctext%7B+from+%7D+(A,+v).+%5C%5C" alt="[公式]"></p><p>在搜索LWE中，给定矩阵<img src="https://www.zhihu.com/equation?tex=A" alt="[公式]">与误差乘积<img src="https://www.zhihu.com/equation?tex=As+++e" alt="[公式]">，如何能够<strong>搜索出（search）</strong>一个合理的<img src="https://www.zhihu.com/equation?tex=s%27" alt="[公式]">，使得<img src="https://www.zhihu.com/equation?tex=As%27" alt="[公式]">得到的向量和问题给定的<img src="https://www.zhihu.com/equation?tex=As+++e" alt="[公式]">之间的误差不能超过误差上限<img src="https://www.zhihu.com/equation?tex=B" alt="[公式]">。</p><p>而在决策LWE中，只需要让我们辨别看到的<img src="https://www.zhihu.com/equation?tex=%5Chat%7Bb%7D" alt="[公式]">到底是LWE问题中的误差乘积还是一个随机生成的向量。</p><p>DLWE这个问题依旧是困难的，其实道理很简单，因为LWE问题本身就是困难的，所以我们没有办法从<img src="https://www.zhihu.com/equation?tex=As+++e" alt="[公式]">这么一个向量中提取出未知向量<img src="https://www.zhihu.com/equation?tex=x" alt="[公式]">来。也就是说，在LWE问题中，在我们的视角里，<img src="https://www.zhihu.com/equation?tex=As+++e" alt="[公式]">这个向量和随机向量没有任何区别，不会给我们提供任何有价值的信息。</p><p>这样一来，我们无法分辨出看到的向量<img src="https://www.zhihu.com/equation?tex=%5Chat%7Bb%7D" alt="[公式]">究竟是LWE中的<img src="https://www.zhihu.com/equation?tex=As+++e" alt="[公式]">还是一个随机的向量，正好符合DLWE假设。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于格中SIS难题的学习记录</title>
      <link href="2021/04/06/xue-xi/dui-yu-ge-zhong-sis-nan-ti-de-xue-xi-ji-lu/"/>
      <url>2021/04/06/xue-xi/dui-yu-ge-zhong-sis-nan-ti-de-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>很久之前就开始看格中的SIS难题了，但总是看了忘，因此想好好的记录一下，加深自己的学习成果，我学习格的主要参考来源于知乎上的一个大佬：<a href="https://www.zhihu.com/people/steven-yue-72/columns">Steven Yue</a>。</p><h2 id="初识SIS"><a href="#初识SIS" class="headerlink" title="初识SIS"></a>初识SIS</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>在讲SIS之前，我们需要先了解一下单向函数（OWF：one way function）。单向函数在密码学中有着极其重要的作用，比如哈希函数。因为是单向的，所以敌手无法根据函数值推算出变量值，从而实现安全的目的。</p><p>我们再了解一下q价随机格的生成方式为：</p><p><img src="https://www.zhihu.com/equation?tex=%5CLambda_q(%5Cmathbf%7BA%7D)+=+%5C%7B%5Cmathbf%7Bx%7D+:+%5Cmathbf%7Bx%7D+%5Ctext%7B+mod+%7D+q+%5Cin+%5Cmathbf%7BA%7D%5ET+%5Cmathbb%7BZ%7D%5E%7Bn%7D_q%5C%7D+%5Csubseteq+%5Cmathbb%7BZ%7D%5Ed+%5C%5C" alt="[公式]"></p><p>而其对应的对偶格为：</p><p><img src="https://www.zhihu.com/equation?tex=%5CLambda_q%5E%5Cperp(%5Cmathbf%7BA%7D)+=+%5C%7B%5Cmathbf%7Bx%7D:+%5Cmathbf%7BAx%7D+=+0+%5Ctext%7B+mod+%7D+q%5C%7D+%5Csubseteq+%5Cmathbb%7BZ%7D%5Ed+%5C%5C" alt="[公式]"></p><h3 id="SIS问题"><a href="#SIS问题" class="headerlink" title="SIS问题"></a>SIS问题</h3><p>SIS，全称为：Short Integer Solution（短整数解），它就是一个单向函数。这个OWF的构造是这样的：</p><p>​        首先，我们随机选取一个<img src="https://www.zhihu.com/equation?tex=n+%5Ctimes+m" alt="[公式]">阶的矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D+%5Cin+%5Cmathbb%7BZ%7D_q%5E%7Bn+%5Ctimes+m%7D" alt="[公式]">（即矩阵A中数字的上限为q），然后我们这个OWF的输入就是一个二进制向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx%7D+%5Cin+%5C%7B0,1%5C%7D%5Em" alt="[公式]">。这个OWF的输出则是：</p><p><img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D)+=+%5Cmathbf%7BAx%7D+%5Ctext%7B+mod+%7D+q+%5C%5C" alt="[公式]"></p><p>图像表示如下：</p><p><img src="https://pic3.zhimg.com/80/v2-318f50fe2fc8774b21456f110509999e_1440w.jpg" alt="img"></p><p>也就是说，我们任意选择一个二进制的短向量，这个向量和随机矩阵的乘积就是OWF的输出了。这个OWF输出的值，其实就是<img src="https://www.zhihu.com/equation?tex=%5CLambda_q(%5Cmathbf%7BA%7D)" alt="[公式]">中的一个格点。有趣的是，我们可以根据对偶格的性质很容易的找到这个问题的一个碰撞：</p><p>只要能够找到一个短向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bv%7D+%5Cin+%5CLambda_q%5E%5Cperp" alt="[公式]">，已知向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx%7D" alt="[公式]">以及OWF的结果<img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D)" alt="[公式]">，我们就可以找到这个OWF的一个collision：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Balign*%7D+f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx+++v%7D)+&=+%5Cmathbf%7BA%7D(%5Cmathbf%7Bx+++v%7D)%5C%5C+&=+%5Cmathbf%7BAx+++Av%7D+(%5Ctext%7Bmod+%7Dq)%5C%5C+&=+%5Cmathbf%7BAx%7D%5C+(%5Ctext%7Bmod+%7Dq)%5C%5C+&=+f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D)+%5Cend%7Balign*%7D+%5C%5C" alt="[公式]"></p><p>因此当我们把OWF的输入格式简化成一个向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx%7D" alt="[公式]">加上对偶格中的某个格点<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bv%7D" alt="[公式]">之后，根据OWF的输出还原出<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx%7D" alt="[公式]">就变成了一个CVP问题：问题给出的向量就是<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bt%7D+=+%5Cmathbf%7Bx%7D+++%5CLambda_q%5E%5Cperp(%5Cmathbf%7BA%7D)" alt="[公式]">，然后我们只要能够找到附近的格点<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bv%7D" alt="[公式]">，就可以相减算出<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx%7D" alt="[公式]">了。不过因为有碰撞的存在，所以不一定是最近的那个格点，任何一个合适的格点都可以。</p><p>总结一下，一个SIS构成的OWF有以下一系列的参数：</p><ul><li>矩阵的维度和模组的大小：<img src="https://www.zhihu.com/equation?tex=m,+n,+q+%5Cin+%5Cmathbb%7BZ%7D" alt="[公式]">。</li><li>OWF的key：<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D+%5Cin+%5Cmathbb%7BZ%7D%5E%7Bn+%5Ctimes+m%7D_q" alt="[公式]">，即一个随机的<img src="https://www.zhihu.com/equation?tex=n+%5Ctimes+m" alt="[公式]">阶的矩阵。</li><li>OWF的输入：<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx%7D+%5Cin+%5C%7B0,1%5C%7D%5Em" alt="[公式]">，即一个长度为<img src="https://www.zhihu.com/equation?tex=m" alt="[公式]">的二进制向量。这里要求二进制的原因是为了确保这个向量的长度足够的短（符合短向量的条件）。理论上也可以使用<img src="https://www.zhihu.com/equation?tex=O(1)" alt="[公式]">范围内任何区间。</li><li>OWF的输出：<img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D)+=+%5Cmathbf%7BAx%7D+%5Ctext%7B+mod+%7Dq" alt="[公式]">。</li></ul><p>​       只要矩阵的维度符合<img src="https://www.zhihu.com/equation?tex=m+%3E+n+%5Ccdot+log(q)" alt="[公式]">这一标准，并且SIVP问题困难的话，那么此<img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D)" alt="[公式]">就是一个合理的OWF。因为在这个条件下，SIS的反问题会被转化成lattice中的CVP难题。</p><h2 id="SIS的性能分析"><a href="#SIS的性能分析" class="headerlink" title="SIS的性能分析"></a>SIS的性能分析</h2><h3 id="SIS的抗碰撞证明"><a href="#SIS的抗碰撞证明" class="headerlink" title="SIS的抗碰撞证明"></a><strong>SIS的抗碰撞证明</strong></h3><p>若要SIS问题发生碰撞，即我们要找到两个不同的输入<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx,+y%7D" alt="[公式]">，使得<img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D)+=+f_%5Cmathbf%7BA%7D(%5Cmathbf%7By%7D)" alt="[公式]">，即两个二进制向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx,+y%7D" alt="[公式]">，并且<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BAx+=+Ay%7D+%5Ctext%7B+mod+%7Dq" alt="[公式]">，它们两个人的差有：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bz+=+x+-+y%7D+%5Cin+%5C%7B-1,+0,+1%5C%7D%5Em+%5C%5C" alt="[公式]"></p><p>因为<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx,+y%7D" alt="[公式]">都是二进制向量，所以它们相减得到的向量，也是二进制的。（我们可以把-1和1看作是一样的，因为在距离上看是相等的。）这也就是说：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BAz+=+Ax+-+Ay+=0%7D+%5Ctext%7B+mod+%7Dq+%5C%5C" alt="[公式]"></p><p>这样一来，我们通过找到一组碰撞，我们就可以找到<img src="https://www.zhihu.com/equation?tex=%5CLambda%5E%5Cperp" alt="[公式]">这个Lattice中的一个短向量，我们就等于解决了<img src="https://www.zhihu.com/equation?tex=%5CLambda%5E%5Cperp" alt="[公式]">这个格中的SVP（或者SIVP）问题。同理，因为SVP/SIVP是困难的，所以我们不能找到SIS的碰撞啦。</p><h3 id="SIS的效率"><a href="#SIS的效率" class="headerlink" title="SIS的效率"></a>SIS的效率</h3><h4 id="SIS的参数设置"><a href="#SIS的参数设置" class="headerlink" title="SIS的参数设置"></a>SIS的参数设置</h4><p>问题：因为SIS问题的定义需要一系列的参数<img src="https://www.zhihu.com/equation?tex=m,+n,+q" alt="[公式]">，如何定义这些参数，才可以满足之前的安全性证明呢？</p><p>Ajtai在96年的paper中指出来，只要<img src="https://www.zhihu.com/equation?tex=m,+n,+q" alt="[公式]">足够大（large enough），那么<img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D" alt="[公式]">就是单向/collision resistant的。对于<img src="https://www.zhihu.com/equation?tex=m,+n" alt="[公式]">的值我们不去变它，因为这个决定了矩阵的维度。所以我们能做的就是压缩q的大小。</p><p>最后，在MP13中，Micciancio与Peikert把<img src="https://www.zhihu.com/equation?tex=q" alt="[公式]">的大小压到了更小。在paper中，他们指出只要<img src="https://www.zhihu.com/equation?tex=q+%5Cge+%5Csqrt%7Bn%7D" alt="[公式]">，那么Ajtai OWF就是安全的。</p><h4 id="运行效率"><a href="#运行效率" class="headerlink" title="运行效率"></a>运行效率</h4><p>验证一个SIS问题需要两部分：</p><p>1、第一部分是SIS的问题矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D" alt="[公式]">，大小由<img src="https://www.zhihu.com/equation?tex=n,+m,+q" alt="[公式]">来决定。如果在Ajtai原版的假设中，<img src="https://www.zhihu.com/equation?tex=q+=+n%5E%7BO(1)%7D,+m+=+O(n+%5Clog%7Bn%7D)+%3E+n+%5Clog_2%7Bq%7D" alt="[公式]">。在这里，我们可以假设<img src="https://www.zhihu.com/equation?tex=n+=+64,+q+=+2%5E8,+m+=+1024" alt="[公式]">。</p><p>2、第二部分就是我们的OWF输入向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx%7D" alt="[公式]">，如果在二进制短向量的假设下，那么输入的就是<img src="https://www.zhihu.com/equation?tex=m" alt="[公式]">个bits。</p><p>我们观察发现<img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D" alt="[公式]">实质上是一个把1024 bits的输入空间（x)映射到512 bits的输出空间的一个压缩函数。（这里512由<img src="https://www.zhihu.com/equation?tex=n+%5Ctimes+%5Clog_2(q)+=+512" alt="[公式]">计算而来，因为矩阵A中的数字并不是二进制，而是1，2，3，…，q。）</p><p><img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D)+=+%5Cmathbf%7BAx%7D+%5Ctext%7B+mod+%7Dq" alt="[公式]"></p><p>在OWF的使用场景中，矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D" alt="[公式]">则是我们OWF的key，这也就是说我们的key的大小就是<img src="https://www.zhihu.com/equation?tex=nm+%5Clog%7Bq%7D+=+2%5E6+%5Ccdot+2%5E%7B10%7D+%5Ccdot+2%5E3+=+2%5E%7B19%7D+=+64+%5Ctext%7B+KB%7D" alt="[公式]">。这对于一个小的OWF来说，key的大小有点太大了。同样，如果我们计算OWF的时候，矩阵相乘需要做<img src="https://www.zhihu.com/equation?tex=nm+=+2%5E%7B16%7D" alt="[公式]">次乘法，这也是非常巨大的一个数字。我们做任何矩阵相乘运算的时候，复杂度一直都是<img src="https://www.zhihu.com/equation?tex=O(n%5E2)" alt="[公式]">的。</p><h4 id="提高效率的方法—削减密钥矩阵的大小"><a href="#提高效率的方法—削减密钥矩阵的大小" class="headerlink" title="提高效率的方法—削减密钥矩阵的大小"></a>提高效率的方法—削减密钥矩阵的大小</h4><h5 id="idea1"><a href="#idea1" class="headerlink" title="idea1"></a>idea1</h5><p>有一个很好的idea就是，如果我们并不全部随机生成整个矩阵，而是随机生成一部分，另一部分用一定的伪随机生成或者线性变换来生成，就可以大大的缩小密钥的大小了（不需要存储整个矩阵）。</p><p>基于这个idea，可以构想出一个最简单的构造：我们就只需要随机生成<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D" alt="[公式]">中的一行（甚至更短），然后把这一行作为一个PRG的种子，随机的生成整个OWF的密钥<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D" alt="[公式]">。这样的话，我们的存储成本就变得很低，但是计算成本还是一样的，甚至会因为PRG的运算变得更差。这是因为PRG生成的数值都是近似随机的，没有任何数字之间的联系。所以我们对于一个随机生成的矩阵进行运算的话，只能通过矩阵相乘，即<img src="https://www.zhihu.com/equation?tex=O(n%5E2)" alt="[公式]">的方法来完成。</p><h5 id="idea2"><a href="#idea2" class="headerlink" title="idea2"></a>idea2</h5><p>就是我们可以随机生成一个向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Ba%7D%5E%7B(i)%7D" alt="[公式]">，然后通过不停的旋转这一行向量的值，逐渐构成一个小的循环密钥矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D%5E%7B(i)%7D" alt="[公式]">。</p><p><img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Ba%7D%5E%7B(i)%7D+=+%5B%5Cmathbf%7Ba%7D_1%5E%7B(i)%7D,+%5Cmathbf%7Ba%7D_2%5E%7B(i)%7D,+%5Cdots,+%5Cmathbf%7Ba%7D_n%5E%7B(i)%7D%5D%5C%5C+%5Cmathbf%7BA%7D%5E%7B(i)%7D+=+%5Cbegin%7Bbmatrix%7D+%5Cmathbf%7Ba%7D_1%5E%7B(i)%7D+&+%5Cmathbf%7Ba%7D_n%5E%7B(i)%7D+&+%5Ccdots+&+%5Cmathbf%7Ba%7D_2%5E%7B(i)%7D%5C%5C+%5Cmathbf%7Ba%7D_2%5E%7B(i)%7D+&+%5Cmathbf%7Ba%7D_1%5E%7B(i)%7D+&+%5Ccdots+&+%5Cmathbf%7Ba%7D_3%5E%7B(i)%7D%5C%5C+%5Cvdots+&+%5Cvdots+&+%5Cddots+&+%5Cvdots%5C%5C+%5Cmathbf%7Ba%7D_n%5E%7B(i)%7D+&+%5Cmathbf%7Ba%7D_%7Bn-1%7D%5E%7B(i)%7D+&+%5Ccdots+&+%5Cmathbf%7Ba%7D_1%5E%7B(i)%7D%5C%5C+%5Cend%7Bbmatrix%7D+%5C%5C" alt="[公式]"></p><p>当我们生成这么一个循环密钥矩阵之后，我们如法炮制，一共生成<img src="https://www.zhihu.com/equation?tex=m/n" alt="[公式]">个矩阵，然后把它们横向拼接在一起，形成我们的密钥矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D" alt="[公式]">：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D+=+%5B%5Cmathbf%7BA%7D%5E%7B(1)%7D+%5Cvert+%5Cmathbf%7BA%7D%5E%7B(2)%7D+%5Cvert+%5Cdots+%5Cvert+%5Cmathbf%7BA%7D%5E%7B(m/n)%7D%5D+%5C%5C" alt="[公式]"></p><h3 id="循环矩阵到多项式"><a href="#循环矩阵到多项式" class="headerlink" title="循环矩阵到多项式"></a><strong>循环矩阵到多项式</strong></h3><p>我们可以对一个矩阵进行简化：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D+=%5Cbegin%7Bbmatrix%7D+1&4&3&8+%5C%5C+8&1&4&3%5C%5C+3&8&1&4%5C%5C+4&3&8&1+%5Cend%7Bbmatrix%7D+" alt="[公式]"></p><p>我们的初始生成向量为<img src="https://www.zhihu.com/equation?tex=%5B1,8,3,4%5D" alt="[公式]">，这也就是说，这个向量的第一个元素1被分配在了矩阵的正对角线上，然后后面的元素依次分配在对角线周围。我们其实可以用一个旋转矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BX%7D" alt="[公式]">来表述这一变换的过程：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BX%7D+=+%5Cbegin%7Bbmatrix%7D+0&0&0&1%5C%5C+1&0&0&0%5C%5C+0&1&0&0%5C%5C+0&0&1&0+%5Cend%7Bbmatrix%7D" alt="[公式]"></p><p>如果我们反复叠加这一旋转矩阵，就可以从1的位置旋转到8的位置，然后再旋转到3的位置，等等。这样一来，我们可以用一组线性组合来表示<img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D" alt="[公式]">：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D+=+1+%5Ccdot+%5Cmathbf%7BI%7D+++8+%5Ccdot+%5Cmathbf%7BX%7D+++3+%5Ccdot+%5Cmathbf%7BX%7D%5E2+++4+%5Ccdot+%5Cmathbf%7BX%7D%5E3+%5C%5C" alt="[公式]"></p><p>这其实就是基于旋转矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BX%7D" alt="[公式]">的一组<img src="https://www.zhihu.com/equation?tex=n-1" alt="[公式]">阶的多项式！如果我们使用更加通用的表达方式的话，那就是：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D+=+a_1+I_n+++a_2X+++%5Cdots+++a_nX%5E%7Bn-1%7D+%5C%5C" alt="[公式]"></p><p>循环矩阵<img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D" alt="[公式]">可以被表述成<img src="https://www.zhihu.com/equation?tex=n-1" alt="[公式]">阶多项式的形式，并且这一结构与<img src="https://www.zhihu.com/equation?tex=%5Cmathbb%7BZ%7D%5Bx%5D/(x%5En-1)" alt="[公式]">的多项式环是同构（isomorphic）的。这也就是说，我们可以使用一组最多为<img src="https://www.zhihu.com/equation?tex=n-1" alt="[公式]">阶，每一项系数在<img src="https://www.zhihu.com/equation?tex=q" alt="[公式]">以内的多项式来代替我们的循环矩阵<img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D" alt="[公式]">。</p><p>我们还注意到，当旋转的次数变得过多（超出了<img src="https://www.zhihu.com/equation?tex=n-1" alt="[公式]">阶）之后，旋转到最下侧的数字会回到最上面来。这一点我们可以在这个多项式环中的乘法上定义：</p><p><img src="https://www.zhihu.com/equation?tex=x+%5Ccdot+x%5Ei+=+%5Cbegin%7Bcases%7D+x%5E%7Bi+1%7D+&+i+%3C+n-1+%5C%5C+1+&+i+=+n-1+%5Cend%7Bcases%7D" alt="[公式]"></p><p>因为我们在<img src="https://www.zhihu.com/equation?tex=x%5En+-1" alt="[公式]">的环中，<img src="https://www.zhihu.com/equation?tex=x%5En" alt="[公式]">比我们的环的大小<img src="https://www.zhihu.com/equation?tex=x%5En-1" alt="[公式]">要大1，所以说<img src="https://www.zhihu.com/equation?tex=x%5En+=+1+%5Ctext%7B+mod+%7D+(x%5En+-+1)" alt="[公式]">。</p><p>当我们把<img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D" alt="[公式]">用多项式表达之后，我们就会发现，<img src="https://www.zhihu.com/equation?tex=x%5En+-+1" alt="[公式]">这一多项式，其实是很好约分的：</p><p><img src="https://www.zhihu.com/equation?tex=x%5En+-+1+=+(x-1)+%5Ccdot+(x%5E%7Bn-1%7D+++%5Cdots+++1)" alt="[公式]"></p><p>这就是为什么我们可以非常简单的找到SIS的解，因为我们可以很简单的找到这个多项式环中的0交界点。</p><h3 id="多项式到RingSIS"><a href="#多项式到RingSIS" class="headerlink" title="多项式到RingSIS"></a><strong>多项式到RingSIS</strong></h3><p>因为我们发现循环矩阵<img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D" alt="[公式]">可以很好的被多项式环代替，我们索性就把原本的SIS OWF的key矩阵变成<img src="https://www.zhihu.com/equation?tex=k+=+m+/+n" alt="[公式]">个多项式拼接在一起。同理，我们把OWF的输入矩阵也变成<img src="https://www.zhihu.com/equation?tex=k" alt="[公式]">个多项式：</p><p><img src="https://www.zhihu.com/equation?tex=f_%7B%5Cmathbf%7Ba%7D_1,+%5Cdots,+%5Cmathbf%7Ba%7D_k%7D(%5Cmathbf%7Bu%7D_1,+%5Cdots,+%5Cmathbf%7Bu%7D_k)+=+%5Csum_i+%5Cmathbf%7Ba%7D_i(X)+%5Ccdot+%5Cmathbf%7Bu%7D_i(X)+%5Ctext%7B+mod+%7D+(X%5En+-+1)%5C%5C+%5Cmathbf%7Ba%7D_i,+%5Cmathbf%7Bu%7D_i+%5Cin+R+=+%5Cmathbb%7BZ%7D%5BX%5D/(X%5En+-+1)" alt="[公式]"></p><p>这样以来，我们就可以通过多项式相乘的方法来计算原本的循环矩阵版的SIS OWF了。随后得到的值也会是一样的，因为我们可以代入原本的旋转矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BX%7D" alt="[公式]">为这里多项式中的取值X，然后等式全部成立。</p><p>我们把这样的，通过多项式环中相乘（而不是矩阵相乘）的类似SIS问题，称之为RingSIS。</p><p>好处：</p><p>1、与之前的循环矩阵的优势一样，我们只需要存储一组随机的向量（即多项式的参数赋值），就可以定义整个问题，这样的存储成本就很低。</p><p>2、多项式之间相乘可以通过FFT（快速傅立叶变换）来达到<img src="https://www.zhihu.com/equation?tex=%5Ctilde%7BO%7D(n)" alt="[公式]">的效率。比起矩阵相乘<img src="https://www.zhihu.com/equation?tex=O(n%5E2)" alt="[公式]">的效率来说，是质一般的飞跃。</p><h3 id="加强安全性的RingSIS"><a href="#加强安全性的RingSIS" class="headerlink" title="加强安全性的RingSIS"></a>加强安全性的RingSIS</h3><p>在RingSIS中，我们可以任意选择想要的多项式环。因为我们之前发现了<img src="https://www.zhihu.com/equation?tex=X%5En+-+1" alt="[公式]">这个环很好约分，所以对应的OWF容易被找到collision，所以我们可以考虑，换一个更加安全的环。</p><p>为了通俗的表达各种多项式环，我们一般都把RingSIS问题中的环用<img src="https://www.zhihu.com/equation?tex=%5Cmathbb%7BZ%7D%5BX%5D/p(X)" alt="[公式]">来表示，其中<img src="https://www.zhihu.com/equation?tex=p(X)" alt="[公式]">就是任意一个monic polynomial。</p><p>如果<img src="https://www.zhihu.com/equation?tex=p(X)" alt="[公式]">不能被进一步约分，那么我们就不能用同样的方法来更快速的找到collision。这样的话我们就可以把不能约分的多项式环下的RingSIS问题的难度规约到理想格（ideal lattice）中的SVP问题上来了。</p><p>一个比较简单的例子就是<img src="https://www.zhihu.com/equation?tex=%5Cmathbb%7BZ%7D%5BX%5D/(X%5En+++1)" alt="[公式]">。这个环和之前的环一样，也包括了所有的<img src="https://www.zhihu.com/equation?tex=n-1" alt="[公式]">阶的多项式。唯一不一样的，是乘法的定义：</p><p><img src="https://www.zhihu.com/equation?tex=x+%5Ccdot+x%5Ei+=+%5Cbegin%7Bcases%7D+x%5E%7Bi+1%7D+&+i+%3C+n-1%5C%5C+-1+&+i+=+n-1+%5Cend%7Bcases%7D" alt="[公式]"></p><p>在得到临界值<img src="https://www.zhihu.com/equation?tex=x%5En" alt="[公式]">的时候，因为我们的环的大小就是<img src="https://www.zhihu.com/equation?tex=x%5En+++1" alt="[公式]">，比<img src="https://www.zhihu.com/equation?tex=x%5En" alt="[公式]">大1，所以我们可以用-1来表示。这样一来，和之前一样是一个Ring的结构，只是乘法的定义有所改变。</p><p>在这种方式下，对应的循环矩阵<img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D" alt="[公式]">就是：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cwidetilde%7B%5Cmathbf%7BR%7D%7D+=+%5Cbegin%7Bbmatrix%7D+1&-4&-3&-8%5C%5C+8&1&-4&-3%5C%5C+3&8&1&-4%5C%5C+4&3&8&1+%5Cend%7Bbmatrix%7D%5C%5C" alt="[公式]"></p><h2 id="SIS的应用"><a href="#SIS的应用" class="headerlink" title="SIS的应用"></a>SIS的应用</h2><h3 id="1、压缩属性的应用"><a href="#1、压缩属性的应用" class="headerlink" title="1、压缩属性的应用"></a>1、压缩属性的应用</h3><p>我们原来有<img src="https://www.zhihu.com/equation?tex=m" alt="[公式]"> bits的信息量，我们等于是把它压缩到了<img src="https://www.zhihu.com/equation?tex=n" alt="[公式]">个<img src="https://www.zhihu.com/equation?tex=q" alt="[公式]">模中的数字，即<img src="https://www.zhihu.com/equation?tex=n+%5Clog%7Bq%7D" alt="[公式]">个bits的信息量。这也正好符合了SIS OWF满射（surjective）的特性，输入空间比输出空间大得多。</p><p>基于这一压缩的特性，我们很自然的就可以用SIS OWF来做一个Collision Resistant Hash Function。具体的CR和单向性我们之前也讨论过了。</p><h3 id="2、SIS的输出随机分布与承诺"><a href="#2、SIS的输出随机分布与承诺" class="headerlink" title="2、SIS的输出随机分布与承诺"></a>2、SIS的输出随机分布与承诺</h3><p>LHL指出，如果一个函数具有Pairwise Independence，并且输出空间小于输入空间（压缩），那么这个函数的输出就为随机分布。</p><p>首先来看Pairwise Independence这一点，它的定义就是，如果任意固定两个输入<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx%7D_1,+%5Cmathbf%7Bx%7D_2" alt="[公式]">，然后我们随机选择一个SIS问题<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D" alt="[公式]">，如果<img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D_1),+f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D_2)" alt="[公式]">这两个SIS OWF的输出分布是独立的，那么这就代表这个函数是成对独立的（Pairwise Independent）。</p><p>当满足随机分布的条件之后，那么我们就可以把<img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D" alt="[公式]">的输出看做一个随机分布的向量：</p><p><img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D+%5Capprox+U(%5Cmathbb%7BZ%7D_q%5En)+%5C%5C" alt="[公式]"></p><p>基于这一特性，我们就可以构建一个承诺（Commitment）系统。一方可以生成一段信息<img src="https://www.zhihu.com/equation?tex=m" alt="[公式]">的承诺<img src="https://www.zhihu.com/equation?tex=C" alt="[公式]">，然后把这个承诺发送给另一方。承诺的本身并不能暴露<img src="https://www.zhihu.com/equation?tex=m" alt="[公式]">的值，即需要满足hiding的属性。稍后，承诺方可以公布一段字串来“打开”这个承诺，随后另一方就可以验证这个承诺的确是从信息<img src="https://www.zhihu.com/equation?tex=m" alt="[公式]">构造而来的。一个承诺打开的方法应该只能有一种，即需要满足binding的属性。</p><p>密码学承诺方案是一个涉及两方的二阶段交互协议，双方分别为承诺方和接收方。第一阶段为承诺级阶段，承诺方选择一个消息m，以密文的形式发送给接收方，意味着自己不会更改m。第二阶段为打开阶段，承诺方公开消息m与盲化因子（相当于秘钥），接收方以此来验证其与承诺阶段所接收的消息是否一致。</p><p>我们基于SIS OWF来尝试构建一个承诺系统：</p><ol><li><p>首先，我们选择两个随机的SIS问题矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D_1,+%5Cmathbf%7BA%7D_2" alt="[公式]">。</p></li><li><p>假如我们要承诺信息<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bm%7D+%5Cin+%5C%7B0,1%5C%7D%5Em" alt="[公式]">，那我们随机选择一个向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Br%7D+%5Cin+%5C%7B0,1%5C%7D%5Em" alt="[公式]">，然后我们输出承诺<img src="https://www.zhihu.com/equation?tex=C(%5Cmathbf%7Bm,+r%7D)+=+f_%7B%5B%5Cmathbf%7BA%7D_1,+%5Cmathbf%7BA%7D_2%5D%7D(%5Cmathbf%7Bm,+r%7D)+=+%5Cmathbf%7BA%7D_1+%5Cmathbf%7Bm%7D+++%5Cmathbf%7BA%7D_2+%5Cmathbf%7Br%7D" alt="[公式]">。</p></li><li><p>注意到这里因为<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D_2,+%5Cmathbf%7Br%7D" alt="[公式]">都是随机生成的，所以基于SIS OWF的随机分布特性，这等于是在我们原本的<img src="https://www.zhihu.com/equation?tex=f_%7B%5Cmathbf%7BA%7D_1%7D(%5Cmathbf%7Bm%7D)" alt="[公式]">上叠加了一层随机的One-Time Pad，所以整体承诺也是随机分布的。</p></li><li><p>同样，这个承诺也是binding的，因为如果我们能够找到一对不同的<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bm%27,+r%27%7D" alt="[公式]">并且可以得到同样的承诺的话，那就等于是我们找到了<img src="https://www.zhihu.com/equation?tex=f_%7B%5B%5Cmathbf%7BA%7D_1,+%5Cmathbf%7BA%7D_2%5D%7D" alt="[公式]">的一对碰撞，这我们已经证明了是不可能的。</p><h3 id="3、SIS的线性同态特性与数字签名"><a href="#3、SIS的线性同态特性与数字签名" class="headerlink" title="3、SIS的线性同态特性与数字签名"></a>3、SIS的线性同态特性与数字签名</h3><p>因为SIS OWF其实就是一个线性组合的表达式，所以整个function其实是线性同态的：</p><p><img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D_1)+++f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D_2)+=+f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D_1+++%5Cmathbf%7Bx%7D_2)+%5C%5C" alt="[公式]"></p></li></ol><p>这里有一点不太完美的地方，即<img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D" alt="[公式]">需要一个norm比较小的输入。然而如果我们把两个短向量相加，得到的并不一定是短向量。这也就是说，这里的加法运算并不是封闭的。</p><p>SIS OWF其实还包含了另一组同态，即密钥同态：</p><p><img src="https://www.zhihu.com/equation?tex=f_%7B%5Cmathbf%7BA%7D_1%7D(%5Cmathbf%7Bx%7D)+++f_%7B%5Cmathbf%7BA%7D_2%7D(%5Cmathbf%7Bx%7D)+=+f_%7B%5Cmathbf%7BA%7D_1+++%5Cmathbf%7BA%7D_2%7D(%5Cmathbf%7Bx%7D)+" alt="[公式]"></p><p>基于第一种输入空间同态的特性，我们可以构造出一个数字签名系统。一个签名系统一般分为三个算法：</p><ol><li><img src="https://www.zhihu.com/equation?tex=KeyGen+%5Crightarrow+(sk,+pk)" alt="[公式]">，即密钥生成，生成用于签名和验证的私钥与公钥。</li><li><img src="https://www.zhihu.com/equation?tex=Sign(sk,+m)+%5Crightarrow+%5Csigma" alt="[公式]">，签名算法，通过私钥创造出签名。</li><li><img src="https://www.zhihu.com/equation?tex=Verify(pk,+m,+%5Csigma)+%5Crightarrow+1/0" alt="[公式]">，验证算法，通过公钥来验证签名是否正确。</li></ol><p>为了构建这一系统，首先需要把SIS OWF的输入空间从一个向量<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bx%7D" alt="[公式]">拓展成一个矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BX%7D" alt="[公式]">：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BX%7D+=+%5B%5Cmathbf%7Bx%7D_1,+%5Cdots,+%5Cmathbf%7Bx%7D_l%5D%5C%5C+f_%5Cmathbf%7BA%7D(%5Cmathbf%7BX%7D)+=+%5Bf_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D_1),+%5Cdots,+f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D_l)%5D+=+%5Cmathbf%7BAX%7D+%5Ctext%7B+mod+%7Dq" alt="[公式]"></p><p>在密钥生成阶段，我们只需要随机生成SIS的问题矩阵<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BA%7D" alt="[公式]">并输出。然后我们选定一个随机的短矩阵和短向量<img src="https://www.zhihu.com/equation?tex=(%5Cmathbf%7BX,+x%7D)" alt="[公式]">作为私钥，并且选定<img src="https://www.zhihu.com/equation?tex=(%5Cmathbf%7BY%7D+=+f_%5Cmathbf%7BA%7D(%5Cmathbf%7BX%7D),+%5Cmathbf%7By%7D+=+f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D))" alt="[公式]">，即私钥在SIS OWF下运算得到的结果作为公钥。</p><p>如果要签署一个消息<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7Bm%7D" alt="[公式]">的话，那么就计算<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BXm+++x%7D" alt="[公式]">，并且输出为签名。</p><p>随后验证的过程也很简单，只需要计算：</p><p><img src="https://www.zhihu.com/equation?tex=f_%5Cmathbf%7BA%7D(%5Csigma)+=+f_%5Cmathbf%7BA%7D(%5Cmathbf%7BXm+++x%7D)+=+f_%5Cmathbf%7BA%7D(%5Cmathbf%7BX%7D)%5Cmathbf%7Bm%7D+++f_%5Cmathbf%7BA%7D(%5Cmathbf%7Bx%7D)+%5Cstackrel%7B?%7D%7B=%7D+%5Cmathbf%7BYm+++y%7D" alt="[公式]"></p><p>这里SIS OWF的同态特性就很完美的帮助我们验证了这一签名的正确性。至于安全性的话，一方面单独只看到一个<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BXm+++x%7D" alt="[公式]">是无法推算出<img src="https://www.zhihu.com/equation?tex=%5Cmathbf%7BX,+x%7D" alt="[公式]">的值的，所以这个签名是One-Time Secure（单次安全）的啦。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生是场马拉松，不是百米跑</title>
      <link href="2021/04/05/sheng-huo-gan-wu/ren-sheng-shi-chang-ma-la-song-bu-shi-bai-mi-pao/"/>
      <url>2021/04/05/sheng-huo-gan-wu/ren-sheng-shi-chang-ma-la-song-bu-shi-bai-mi-pao/</url>
      
        <content type="html"><![CDATA[<p>小时候，我曾经因为爸妈多给了哥哥几块钱，就故意赌气假装走丢，其实我是走了另一条路回家，当时的我就觉得，爸爸妈妈根本就不爱我，他们太偏心了。现在回忆起来，当时我回去的时候他们一直在焦急的在寻找我，哪有什么偏不偏心，一切都是自己在自寻烦恼。</p><p>高中时，因为一次考试失利，可能就难受的好几天吃不下饭，甚至陷入自我怀疑的情绪之中；现在看来，考试成绩本就是起起伏伏，一时的失利根本代表不了什么，它只能表示你有些知识点还没有掌握，根本没必要难受。</p><p>大学时，因为一次失恋，整个人几个月都走不出去。好吧，现在也不能说已经完全走出来，但从现在的自己看刚失恋时自己做的一些事已经觉得很可笑了。</p><p>生活中不如意的事每天都在上演，那为什么同一件事情在两个时间点的我们看来有这么大的不同呢。我认为，当我们身处局中，我们看待事物就把它当成了自己生活中的很大一部分。但当我们回首往事时，某一件事情只是我们度过的漫长的人生中的一件事，它并不会占据我们多大的人生，所以不值一提。</p><p>那我们应该怎样好好的过完这一生？对待开心的事，我们就要身处局中，好好的去享受生活的乐趣；对待糟糕的事，我们就应该将自己置身于整个人生中思考，将其摒弃掉。</p><p>对待开心的事情就是想办法让它留的更久。从今年开始，我开始喜欢出去玩，去认识一些新的人与事物，并且迫切的想将它们记录下来。因为我知道，在宿舍玩一局游戏、睡一下午、看一本网络小说，它只能让你快乐一下，它们在你的人生中掀不起一丝浪花；但是我去一次动物园、看一次樱花、体验一次蹦极，用文字和照片记录下来，那么就算过了一二十年，回忆起来，这些事情依旧能让你回味无穷。</p><p>对待糟糕的事情就是想办法让自己置身于整个人生去面对它。生活中或多或少会有一些“小人”，她们会做一些让你难受的事，对待这种的人最好的方式就是远离她。因为远离了她们，她们就只是你人生中短暂的一个过客，不值得你去因为她难受。除了恶心的人，还会有一些糟糕的事情会发生在你身上，但是再糟糕能糟糕到哪去。于我而言，只要家人朋友自己身体健康，无病无灾，其他的都算不了什么，因为除了健康没有什么是不能再去通过努力重新获得的。</p><p>人生是场马拉松，不是百米跑。我们要把自己的情绪调整好，开心过一天，不开心也是过一天，让所有的烦恼都像风一样飘散，让所有的开心都像阳光一样照遍自己的生活！</p><p><img src="/image/%E4%BA%BA%E7%94%9F%E6%98%AF%E5%9C%BA%E9%A9%AC%E6%8B%89%E6%9D%BE%EF%BC%8C%E4%B8%8D%E6%98%AF%E7%99%BE%E7%B1%B3%E8%B7%91/smile.jpg" alt="smile"></p>]]></content>
      
      
      <categories>
          
          <category> 生活感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客创建之旅</title>
      <link href="2021/04/04/bo-ke-chuang-jian/wo-de-bo-ke-chuang-jian-zhi-lu/"/>
      <url>2021/04/04/bo-ke-chuang-jian/wo-de-bo-ke-chuang-jian-zhi-lu/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;大概是在一个星期之前，我的心中突然萌发了想要创建一个自己博客的想法。因为我觉得学习的过程是一个不断反思提高的过程，而博客正好可以当作一处记录的平台。不仅如此，有的时候心中也有一些对于生活的思考感悟，这些都可以放在博客上，宛如创造了一个互联网上的“我的世界”。经过一个星期的摸爬滚打，博客也算有了一个初步的雏形，因此想把这个过程记录下来。</p><h2 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h2><p>&emsp;&emsp;首先，你要确定自己到底想要搭建一个什么样的博客；如果是依托于CSDN、博客园等平台，那么简单的去注册账号即可。但我当时觉得创建一个个人博客网站，不仅可以摆脱平台的限制，而且更有“小天地”的感觉。于是，在大量的网上查询的过程中，确定了基于Hexo搭建博客的想法。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>&emsp;&emsp;在搭建博客初期，心中的想法是将博客部署到云服务器上，并且用一个域名去指向它。于是，在最开始，我在<a href="https://wanwang.aliyun.com/">阿里云</a>平台上购买了一个域名，新人优惠很便宜，我当时就只花了8.8元就购买了一年。然后就是云服务器的事情，大学生可以通过学生认证<a href="https://developer.aliyun.com/adc/student/?spm=a2c6h.19776329.J_8005678510.6.564b3d80CBIvEi#J_5144437010">免费获得</a>两个月的免费使用时间，后续还可以通过答题再次获得一段免费时间。</p><h2 id="云服务器上的部署"><a href="#云服务器上的部署" class="headerlink" title="云服务器上的部署"></a>云服务器上的部署</h2><p>&emsp;&emsp;在最开始，我的想法是照着网上的一篇教程做下来，我也找到了一篇<a href="https://blog.objectspace.cn/2019/08/15/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%A5%B6%E5%A6%88%E7%BA%A7%E6%95%99%E5%AD%A6/#">很好的教程</a>。但由于自己对于教程中的一些步骤“知其然，而不知其所以然”，所以在最后的部署过程一直报错。不过我也很感谢这次失败，正是因为这些失败，我才不断的去网上找相应的失败原因和解决方法，最后对于搭建博客有了更深的认识。下面的一些步骤是我自己根据教程总结出来的，当然，大部分还是和教程一样的，不过我加入了一些自己对于步骤的想法。</p><h3 id="推倒重来"><a href="#推倒重来" class="headerlink" title="推倒重来"></a>推倒重来</h3><p>&emsp;&emsp;如果你是第一次开始创建，那这个可以略过不看。如果你也是因为后面的一次次部署失败而想重头再来，那可以参考一下。</p><p>云服务器的初始化很简单：</p><p>首先进入控制台中的ECS服务器管理，然后将实例停止：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/0.png"></p><p>然后初始化云盘：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/1.png"></p><p>这样，就回到了最初的状态。</p><h3 id="服务器初始设置"><a href="#服务器初始设置" class="headerlink" title="服务器初始设置"></a>服务器初始设置</h3><p>首先重新设置云服务器的密码：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/2.png"></p><p>设置完成以后就可以在主机上远程登陆服务器了。</p><p>在登陆之前先配置好安全组规则，允许80端口的访问：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/3.png"></p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/4.png"></p><p>第一次访问云服务器建议使用putty软件：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/5.png"></p><p>然后输入：root，回车以后再输入密码就登陆到云服务器了。</p><h3 id="配置云服务器"><a href="#配置云服务器" class="headerlink" title="配置云服务器"></a>配置云服务器</h3><p>我们需要nginx作为我们的网站服务器，所以我们首先要安装nginx，我们可以使用yum命令直接进行安装。</p><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><p>安装的执行命令如下：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y nginx</code></pre><p>然后启动服务器：</p><pre class=" language-bash"><code class="language-bash">systemctl start nginxsystemctl <span class="token function">enable</span> nginx</code></pre><p>在这里我们要记住/etc/nginx/是nginx默认的配置路径，一会要用到。</p><p>在我们启动之前是云服务器的公网地址是无法访问的，启动之后就会出现如下页面：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/6.png"></p><p>但是我们实际上是想要让这个公网地址指向我们的博客，而不是nginx的默认网址，这就需要我们去配置nginx的配置文件。阿里云默认的库下载的是fedora版本的nginx，所以我们应该配置的是位于 etc/nginx/ 下的 nginx.conf 。</p><p>我们可以打开该文件并修改：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/nginx/nginx.conf</code></pre><p>修改前：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/7.png"></p><p>修改后：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/8.png"></p><p>按esc退出编辑，:wq保存退出。</p><p>因为我们在配置中指明了将/home/www/website作为博客目录存放地址，因此此时我们需要去创建它。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home<span class="token function">mkdir</span> www<span class="token function">cd</span> www<span class="token function">mkdir</span> website</code></pre><h4 id="云服务器中安装Git以及Node-js"><a href="#云服务器中安装Git以及Node-js" class="headerlink" title="云服务器中安装Git以及Node.js"></a>云服务器中安装Git以及Node.js</h4><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><pre class=" language-bash"><code class="language-bash">curl -sL https://rpm.nodesource.com/setup_10.x <span class="token operator">|</span> <span class="token function">bash</span> -<span class="token function">sudo</span> yum <span class="token function">install</span> -y nodejs</code></pre><p>有如下显示则表示安装成功：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/9.png"></p><h5 id="安装Git及配置仓库"><a href="#安装Git及配置仓库" class="headerlink" title="安装Git及配置仓库"></a>安装Git及配置仓库</h5><p>这一部分的主要目的是让我们个人的电脑可以通过ssh方式连接到云服务器，然后我们就可以通过命令行方式将我们的博客Po到服务器上。操作如下：</p><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git:"></a>安装git:</h5><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span></code></pre><h5 id="配置git用户："><a href="#配置git用户：" class="headerlink" title="配置git用户："></a>配置git用户：</h5><pre class=" language-bash"><code class="language-bash">adduser <span class="token function">git</span></code></pre><p>修改用户权限：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 740 /etc/sudoers<span class="token function">vi</span> /etc/sudoers</code></pre><p>注意文件夹中权限设置的意义：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/10.png"></p><p>然后在这个地方添加这句话：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/11.png"></p><p>这样，服务器的用户就有了root和git两个（这里很重要，你在不同的用户下面进行同样的操作，最后会产生不同的结果，我的第一次失败很大原因就是因为这个。）</p><p>保存退出后 将sudoers文件权限改回原样</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 400 /etc/sudoers</code></pre><p>设置git用户的密码：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token function">git</span></code></pre><p>注意：后面的ssh公钥，既标识用户，也标识机器，所以在使用的时候要注意切换。</p><h4 id="云服务器中的公钥配置"><a href="#云服务器中的公钥配置" class="headerlink" title="云服务器中的公钥配置"></a>云服务器中的公钥配置</h4><p>首先切换到git用户，然后在~目录下创建.ssh文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span><span class="token function">cd</span> ~<span class="token function">mkdir</span> .ssh<span class="token function">cd</span> .ssh</code></pre><p>生成公钥密钥文件(接下来这几步都在主机里面做，使用gitbash)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.sshssh-keygen</code></pre><p>此时在目录下就会有两个文件，分别是</p><p>id_rsa 和 id_rsa.pub</p><p>其中 id_rsa.pub 就是公钥文件 我们打开文件并复制一下</p><pre class=" language-bash"><code class="language-bash">vim id_rsa.pub</code></pre><p>接下来，接着回到服务器中进行操作：</p><p>在服务器中生成认证文件authorized_keys：（在git用户下的.ssh文件夹中哦）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> authorized_keysvim authorized_keys</code></pre><p>然后将我们刚才从id_rsa.pub中复制的密钥粘贴进去</p><p>最后我们修改它的权限：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 600 ~/.ssh/authorized_keys<span class="token function">chmod</span> 700 ~/.ssh</code></pre><p>这个时候，我们就可以在主机，打开cmd或gitbash，使用ssh方式连接我们的云服务器了。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> git@服务器公网IP</code></pre><h4 id="在云服务器中创建git仓库"><a href="#在云服务器中创建git仓库" class="headerlink" title="在云服务器中创建git仓库"></a>在云服务器中创建git仓库</h4><p>现在我们要开始创建一个git的仓库，并且新建一个post-receive文件，目的是为了接收来自主机的git操作，操作如下:（注意，这些操作都处于git用户之下的）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~<span class="token function">git</span> init --bare blog.git<span class="token function">vi</span> ~/blog.git/hooks/post-receive</code></pre><p>然后在post-receive文件中输入以下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/www/website --git-dir<span class="token operator">=</span>/home/git/blog.git checkout -f</code></pre><p>这样就把git仓库中的文件指向/home/www/website了。</p><p>保存退出并授予该文件可执行权限：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x ~/blog.git/hooks/post-receive</code></pre><p>至此我们就完成了所有关于服务器端的所有配置。</p><h2 id="在Windows主机上的配置"><a href="#在Windows主机上的配置" class="headerlink" title="在Windows主机上的配置"></a>在Windows主机上的配置</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>在主机上的操作比较简单，首先先在主机上安装好git，然后确保安装好了node.js。</p><p>如果显示以下内容则代表已经安装好：</p><p><img src="/image/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B9%8B%E6%97%85/12.png"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<a href="https://hexo.io/zh-cn/docs/">Hexo</a></h3><p>在安装之前，将npm换成淘宝的服务器，避免因为连到国外的服务器而导致卡顿</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p>接下来就直接安装 hexo：</p><pre class=" language-bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-cli</code></pre><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>然后我们选择一个目录用来初始化博客程序，例如F:/Blog</p><p>在cmd中输入：</p><pre class=" language-bash"><code class="language-bash">F:<span class="token function">cd</span> bloghexo init</code></pre><p>执行成功后再安装两个插件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span class="token function">npm</span> <span class="token function">install</span> hexo-server</code></pre><p>然后执行：</p><pre class=" language-bash"><code class="language-bash">hexo ghexo s</code></pre><p>之后我们就可以在自己的本机上，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>查看自己的博客了；</p><p>修改blog文件夹中的配置文件<a href="https://blog.csdn.net/zemprogram/article/details/104288872">_config.yml</a>完成博客的部署，这个步骤的目的是将我们的博客指向我们的服务器中。</p><p>在刚才生成Hexo的目录下，找到_config.yml，打开它。</p><p>找到deploy 做如下配置（注意冒号后面有空格,type,repo,branch,message前面也加两个空格）</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@这里改为服务器公网IP<span class="token punctuation">:</span>/home/git/blog.git         <span class="token key atrule">branch</span><span class="token punctuation">:</span> master                             <span class="token key atrule">message</span><span class="token punctuation">:</span></code></pre><p>保存退出，然后尝试写一篇文章并且发布到服务器上：</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"Hello My First Blog"</span>hexo clean hexo ghexo d</code></pre><p>在服务器上重新运行nginx服务器：</p><pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre><p>这样，就将博客部署到服务器上了，可通过公网IP进行访问了。</p><h2 id="出现的错误："><a href="#出现的错误：" class="headerlink" title="出现的错误："></a>出现的错误：</h2><p>通过以上的步骤应该可以通过公网IP访问到自己的博客了，但我在部署后出现了如下错误：</p><pre class=" language-bash"><code class="language-bash">remote: fatal: cannot create directory at <span class="token string">'2021'</span><span class="token keyword">:</span> Permission denied</code></pre><p>并且部署目录/home/www/website/里面并没有推送的文件，出现这个问题的原因应该是部署目录/home/www/website/ 没有写权限导致的。</p><p>解决方法：添加写权限只能就可以了。(注意：在root权限下方可执行)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home/www<span class="token function">chmod</span> go+w website</code></pre><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>在将前面的步骤完成之后，现在该做的就是选择一个漂亮的主题了，主题可以在<a href="https://hexo.io/themes/">Hexo主题网站</a>中进行选择。在你选择好主题后会进入到该主题对应的GitHub项目中，访问项目中的Wiki即可获得安装步骤。</p><p>说来惭愧，在最开始的时候我选择了<a href="https://github.com/tomotoes/hexo-theme-tomotoes">hexo-theme-tomotoes</a>，但在安装主题的过程中一直出错，最后只能选择放弃。我选择的第二个主题是<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>，这个主题在作者的<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">博客</a>中有详细的介绍，因此不再加以赘述。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>在前面的步骤完成之后，现在我能利用云服务器的公网IP对博客进行访问了，但我想要的是利用域名进行访问。如果需要用域名解析到国内的服务器并进行访问需要对域名和服务器进行备案，这里又出现一个难题，服务器备案需要购买超过三个月，而我领到的免费云服务器只有两个月。不仅如此，如果一直使用云服务器，后续的开销也会越来越大，这对于仅仅是学生的我负担很大。因此开始考虑优化博客的部署方案。</p><p>优化考虑的方案是将博客部署到Github上，在最开始之所以没有考虑GitHub的原因是Github访问太慢，而且有时候会出现连接断开的问题。在经过搜索之后，我发现了可以利用Vercel解决这个问题。</p><h4 id="Github部署博客"><a href="#Github部署博客" class="headerlink" title="Github部署博客"></a><a href="https://blog.csdn.net/princek123/article/details/84067942?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.baidujs&dist_request_id=1328767.43301.16175234863539657&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.baidujs">Github部署博客</a></h4><p>这里需要注意的是blog中_config.yml的修改，注意修改两个地方，一个是deploy，还有一个是url和root：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>xxx/xxx.github.io.git         <span class="token key atrule">branch</span><span class="token punctuation">:</span> master                             <span class="token key atrule">message</span><span class="token punctuation">:</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//xxx.github.io/<span class="token key atrule">root</span><span class="token punctuation">:</span> /</code></pre><p>特别注意：GitHub上并不是实时更新的，它会有一段时间的延迟，因此如果修改了以后一下子没有刷新出来不妨等一会儿。</p><h3 id="Vercel上部署Github的项目"><a href="#Vercel上部署Github的项目" class="headerlink" title="Vercel上部署Github的项目"></a><a href="https://blog.csdn.net/wzc_coder/article/details/112300956">Vercel上部署Github的项目</a></h3><p>这里注意的是域名的解析，不妨在控制台中将xxx.com和”www+xxx.com”都进行解析，这样，这两个网址都会指向Vercel中的项目。</p><h2 id="博客编辑器"><a href="#博客编辑器" class="headerlink" title="博客编辑器"></a>博客编辑器</h2><p>在这里我推荐两个博客编辑器，一个是<a href="https://github.com/zhuzhuyule/HexoEditor">HexoEditor</a>,一个是<a href="https://typora.io/">typora</a>。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上只是将一个博客的台子给搭好了，后面还有更多的内容需要自己去慢慢摸索。</p><p>在搭建好之后，我写了这篇博文，刚发布的时候代码显示一直不对劲，但当时也没有去管它，后面又去忙其他的事情去了。直到现在（四月十三号），才抽出时间把这个弄好了，其实就是个小问题，是_config.yml文件中的highlight.enable忘记设置成false了。所以，遇到问题不要拖，因为问题一旦将就，后面日积月累就会形成大问题，所以一开始就要有沉下心来，解决问题的勇气和决心。</p><p>（以上内容是作者本人的一些经历感悟，如果有问题欢迎讨论交流！）</p>]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
